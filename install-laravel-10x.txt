I. Do An
	1, De tai?
	2, PHP + LAvarel (9x, 10x)
	3, RDBMD + MYSQL
	4, CRUD
	5, Theme beautifull
II. Lavarel
1, cmd : cd C:\xampp\htdocts
2, composer create-project laravel/laravel huyduoc-10x
note: cai extension Lavarel....

terminal:
1, php artisan serve
	copy port
2, file .env	
ktr key:
ktra port:port 3307
ktra DB:
	- download git: 
	terminal :php artisan key:generate
3, 
-// Router get + closure

-routes/web.php
Route::get('test', function () {
    return '<h1>Test</h1>';
});
 --> http://127.0.0.1:8000/test

4: 
//Router + Controller (routes/web.php)
php artisan make:controller TestController 
--> ad TestController vao app/Http/Controller
	note: use App\Http\Controllers\TestController;
5, 

php artisan make:controller Admin\ProductCategoryController


Buoi2: Blade Templates Lavarel
	DOWNLOAD from git:
	add extention: laravel Blade, Laravel Extra, Laravel Goto View, Laravel Artisan, 
			php interlephense
			1, composer install
			2, copy file .env.example --> file .env
			3, php artisan key:generate
			4, php artisan serve
			5, copy link
	2, Blade Templates Lavarel: https://laravel.com/docs/10.x/blade  
		@php @endphp	, @foreach @endforeach, @if @endif
		echo --> {{$name}}  note:( co hàm htmlspecialchars)
			hoặc {!!$name!!} không có htmlspecialchars
		@if{}@endif --> @emty{}
	3,Examples Bootstrap 5.0: https://getbootstrap.com/docs/5.0/examples/

Buoi3:
- function validation lavarel;
       <input type="hidden" name="_token" id="csrf-token" value="{{ Session::token() }}" />
 	hoac	@csrf
- Rules Validation Lavarel
- any(): if($errors->any()){. . .} : $errors(mặc định của validation lavarel)---> nếu có bất kỳ $errors --> chạy
- all(): @foreach($errors->all() => $error)
- old(): (không dùng cho password) : <input value="{{ old('name') }}">

I: Save $request into database (1:Sql Raw, 2:Query Builder, 3:Eloquent)
1, Sql Raw
2, Query Builder
3, Eloquent


- mysql: bidding
- session flash 


Buoi4:

- Dang nhap, dang ky, dang xuat
- Library: Breeze 
	https://laravel.com/docs/10.x/starter-kits
	1, cmd: composer require laravel/breeze --dev 
		 https://laravel.com/docs/10.x/starter-kits
		
	2, cmd:	php artisan breeze:install
 
		
		npm install
		npm run dev
	3, dowmload nodeJS--> reset VS Code
	4, cmd: php artisan migrate   --> (insert table to DB)





Buoi5: UI/UX, DI/DX --> Migration

cmd: php artisan migrate --> chạy code lên MySQL

{
	1, download nodejs
	2, sửa port DB trong .evn
	3, php artisan migrate 
	4, php artisan make:migration create_product_category_table
}
php artisan make:migration create_product_table
php artisan make:migration create_product_category_table
		note: _table. . . 
php artisan make:migration add_copunm_qty_to_product_table

php artisan migrate:refresh --> chạy lại toàn bộ dữ liệu --> mất hết thông tin.

file: seeders/DatabaseSeeder.php --> \App\Models\::factory(10)->creae();
php artisan db:seed

php artisan migrate:fresh --seed


Buoi 6: Laravel Middleware, Library Carbon, group route:group+route+name
php artisan make:middleware IsAdmin


Buoi7: 
Table Product

1. Product_category
id(PK)
name
status ->default 1 -> 0
slug
created_at
updated_at

2. Product
id(PK)
product_category_id(FK) (FK-> references('id') -> on('Product_category'))
name
price
disscount_price
short_description
slug
description
information
image_url
qty
status
weight
shipping
created_at
updated_at


3. Product_image
id(PK)
image_url
product_id(FK)
created_at
updated_at


Buoi:8 Query Builder, JQuery.ajax


Create: 
1. Form? method POST|GET? action {{ route('('admin.product_category.save')}} ?
@csrf
2. Check input? name?
3. Create ? type button submit?
4. Make Controller -> create function()
	4.1 php artisan make:controller Admin\ProductCategoryController
	4.2 public function store(){}
	4.3 Route::post('admin/product_category/save', [ProductCategoryController::class, 'store'])->name('admin.category.save');
5. public function store()

public function store(Request $request) {
	$request->validate();
	
	//font-end
	@error('name')
		{{$message}}
	@enderror
	
	//save into DB
	$productCategory = DB::insert();
	
}

* use Illuminate\Support\Str;
* slug url friendly: $slug = Str::slug($request->name);
	

@section
	@if(session('message'))
		{{session('message')}}
	@endif
@endsection


- SQL RAW, Query Builder

- JQuery
<script type = "text/javascript">
	$(document).ready(function(){
		$('#name').on('keyup', function(){
			let name = $(this).val();
			$.ajax({
				method: 'POST',
				url: "{{ route('admin.product_category.slug')}}",
				data: {
					name: name,
					_token: "{{ crsf_token() }}"
				},
				success: function(res){
					$('#slug').val(res.slug);
				},
				error: function(res){
					//
				}
			});
	})
})
</script>



Buoi 9: Edit Product
1. /admin/product_category/. . .
2. web.php

3. ProducCategoryController
	public function detail($id) {
	$id
	select * from product_category where id = 
	$productCategory = 
	return view

}
4. Create view admin.product_category.detail -> copy template admin.product_category.create
5. Pass data to view and generate HTML


--- Edit Product Category
1. form? method POST|GET action({{ route('admin.product_category.update') }})??
2. check input in form ? name? 
3. update button ? submit?
4. web.php
	Route::post('admin/product_category/update', [ProductCategoryController::class], 'update')->name('admin.product_category.update');

5. ProductCategoryController.php
	public function update(Request $request){
		//validate input from user
		$request->validate([	
				'name'=>'required'
			])
		//Show error
		@error('name')
			{{ $message }}
		@enderror
		//update into DB
		$check = DB::update('update product_category set name = ?, slug = ? where id =? , status = ?', [1,2,3,4]);
		$message = $check ? 'success' : 'failed';
		return view('admin.product_category.list')->with('message', $message);

	}



Buoi 10: Custom pagination, Library: Ckeditor, MVC: Model
- Library Font-End(Bootstrap, tailwind. . .):
	Vendor/laravel/framework/src/pagination/resource/views
- Custom pagination: {{$productCategories ->links('admin.pagination.custom')}}

1. Model
2. Eloquent (SQL RAW, Query Builder, Eloquent)
	ORM: Object Reletional Mapping
3. Install Extensions Google: Fale Filler

- Product: 
CRUD:
	C: Create + create() + store()
	R: Get list + get Detail + index() + show()
	U: Update + update()
	D: Delete + destroy()
- php artisan make:controller Admin\ProductController --resource

- Web.php 
	Route::resource('admin/product', ProductController::class);
 		-------> tu tao ra tat ca cac  route cua ProductController
- WYSWYG: what you see, what you get <==== Library textEditor: Ckeditor
- MVC: php artisan make:model Product

- Model:
	protected $table = 'product';
	public $fillable =[];



Buoi 10: Builder query: JOIN

--------- Model ProductCategory
1, Make Model: 
	php artisan make:model ProductCategory
2, Define table 
protected $table = 'product_category';
3, Retrieve(GET) all records
$productCategories = ProductCategory::all();
$productCategories = ProductCategory::where('status', 1)->get();

---------- Product List
<a class="btn btn-primary"href="{{ route('admin.product_category.create') }}">Create</a> 
1, Template List
2, Get all record product
3. Admin\ProductController.php
	public function index(){
		$products = App\Models\Product::add();
		return view('admin.product.list',['products' => $products]);
	}
4. admin/product/list.blade.php 
	foreach($products as $product)




1 product se thuoc 1 category nao do ------->belongsTo();
    public function category()
    {
        return $this->belongsTo(ProductCategory::class, 'product_category_id');
    }
1 category se chua nhieu product -------> hasMany();
    public function products()
    {
        return $this->hasMany(Product::class, 'product_category_id');
    }




Buoi 11: - Third-party: S3(S: simple,S: storage, S: servire)-Amazon
	 - Cloudinary

Template + Form Edit Product
1. Copy template Create
2. php artisan route:list --> admin.product.show
3. admin\ProductController.php
 function show(string $id) {
	//SQL RAW
	$product = DB::select('SELECT * FROM product WHERE id = ?', [$id]);

	//Query Builder
	$product = DB::table('product')->where('id',$product_>id);
	
	//Eloquent
	$product = Product::find($id);
}


- @method('PUT')
- @method('DELETE')


- php artisan make:request StoreProductRequest


Buoi 12: JQueryui.com: https://jqueryui.com/slider/#range

- input search(filter):keyword, price range, sort by price
- onDelete('cascade')
- Tạo dữ liệu mẫu 
	php artisan make:factory ProductCategoryFactory
	php artisan make:factory ProductFactory


Buoi 13: Pipeline Partern Design, softDeletes(), onDelete('cascade'), withTrashed(), restore()

- parent --> delete
	==> 1, onDelete('SET NULL')
	==> 2, onDelete('cascade')
	- onDelete('cascade'):
	   $table->foreign('product_category_id')->references('id')->on('product_category')->onDelete('cascade');
- softDeletes(): $talbe->softDeletes(); #--> create deleted_at
	
		   $table->foreign('product_category_id')->references('id')->on('product_category')->onDelete('cascade');
		   $talbe->softDeletes();
- Models
	use HasFacetory, SOftDeletes
	use Illuminate\Database\Eloquent\SoftDeletes;
- restore


Buoi 14: Library Datatables of javascript, Eager Loading, View Composer
- Eager Loading: <== N + 1 problem
- Laravel debugg bar
- sortDelete chỉ dùng được với eloquent

- Library Datatables: 
	library datatables ---> use client: search, sort.... -->client
	
- use App\Http\Controllers\Client\ProductController as ClientProductController;
- View Composer




Buoi 15: view composer: 
- 1, php artisan make:provider ComposerServiceProvider
- 2, file app.php :         App\Providers\ComposerServiceProvider::class,
- 3,     public function boot(): void
    {
        View::composer('*', function ($view) {
            return $view->with('phamhuyduoc', 'Pham Huy Duoc');
        });
    }

== CART
1, add product to cart
Business logic : ? 
	DMX(dienmayxanh): not login -> add product to cart
	SHoppe : logged -> add product to cart

-- add to cart:
	- session
	- database
	
	1, Click icon cart -> add product to cart
	$cart = [];
	2, make:controller
	3, Route::get('/product/add-to-cart/{productId}', [])->name();
	4, Ajax -> GET


Buoi 16: Cart


Buoi 17: CheckOut

php artisan make:migration CreateOrderTable
-- Order --
id (PK)
user_id => FK (user)
address
note
payment_method (cod | vnpay)
subtotal  // easy search/sort
total // easy search/sort
status
created_at
updated_at
deleted_at


php artisan make:migration CreateOrderTable
-- Order Item --
id (PK)
oder_id => FK (Order)
product_id => (Product)
product_name
product_price
product_qty
created_at
updated_at
deleted_at

php artisan make:migration AddPhoneToUsers
-- User --
phone

php artisan make:migration CreateOrderPaymentMethodsTable
-- Payment Method --
id (PK)
oder_id => FK (Order)
payment_provider
total_balance
status
created_at
updated_at
deleted_at

1, form?? method?? action??
2, @csrf ??
3, input name??
4, type submit??


Laravel Transaction
DB::beginTransaction();
try{
record 1
record 2
record 3
}catch(\Exception $message)
 	{DB::rollback();}

Mật Khẩu Tạo Ứng Dụng
MAIL_MAILER=smtp
MAIL_HOST=smtp.gmail.com
MAIL_PORT=587
MAIL_USERNAME=huyduocphamm@gmail.com
MAIL_PASSWORD=irogvgqybhynirxx
MAIL_ENCRYPTION=tls
MAIL_FROM_ADDRESS="huyduocphamm@gmail.com"
MAIL_FROM_NAME="${APP_NAME}"


Buoi 18: Mail, DI (Dependency Injection) <= Design Patern

php artisan make:mail OrderMail


// Send mail to customer to confirm that order
            Mail::to('huyduocphamm@gmail.com')->send(new OrderMail($order));

// Send mail to admin to prepare order
            Mail::to('huyduocphamm@gmail.com')->send(new OrderAdminEmail($order));




// test: Route::get('test-send-mail', function () {
    Mail::to('huyduocphamm@gmail.com')->send(new OrderMail());
});

### Twilio: 
	composer require twilio/sdk
	
	TWILIO_ACCOUNT_SID =ACfe88b649f8fb58280d863b92e0246ca6
	TWILIO_AUTH_TOKEN =f5e39b32392836f15264e604fc6a5d49
	TWILIO_PHONE_NUMBER =+12294664901
	
- url shortener
- Design Pattern
- Event Listener

php artisan make:event OrderSuccessEvent
php artisan make:listener SendEmailToCustomerWhenOrderSuccess




Buoi 19: DI: dependency Injection, Payment Method
#### VNPay: https://sandbox.vnpayment.vn/devreg
download PHP : https://sandbox.vnpayment.vn/apis/downloads/




Buoi 20: Login Google, Laravel Socialite, observer pattern design

--- Login Google: Google Developer Console

--- Laravel Socialite: composer require laravel/socialite


--- Observer Pattern Design: 
	php artisan make:observer ProductObserver --model=Product



Buoi 21: Upload image, Repository Pattern, Google Chart, API (postman)

-- Repository Pattern: App\Http\Repositories;

### API (postman): https://www.postman.com/downloads/
	- Application Programing Interface
	- Dowmload : https://www.postman.com/downloads/
	- rss vnexpress: https://vnexpress.net/rss
			-> https://vnexpress.net/rss/tin-moi-nhat.rss

	- php artisan make:controller API\V1\ProductController --api
				// php artisan make:controller API\V1\ProductController
				// php artisan make:controller API\V1\ProductController --resource

	- php artisan route:list --path=api





### Google Chart: https://developers.google.com/chart/interactive/docs/gallery


db:seed: factories + seeders



DO AN
.zipp
1, ERD
2, Slide
3. Source code
3. Source code + slide + ERD -> compress -> classroom(link)


-- Sử dụng thư viện: 


-- JSON & XMLparser
























